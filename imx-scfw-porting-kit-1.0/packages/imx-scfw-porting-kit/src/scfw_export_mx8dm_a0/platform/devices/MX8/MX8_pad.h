/*
** ###################################################################
**     Processors:          MX8
**
**     Compilers:           GNU C Compiler
**
**     Abstract:
**         CMSIS Peripheral Access Layer for MX8
**
**     Copyright (c) 1997 - 2015 Freescale Semiconductor, Inc.
**
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**
**     o Neither the name of the copyright holder nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**
** ###################################################################
*/

/*
 * WARNING! DO NOT EDIT THIS FILE DIRECTLY!
 *
 * This file was generated automatically and any changes may be lost.
 */
#ifndef HW_PAD_REGISTERS_H
#define HW_PAD_REGISTERS_H

#define IOMUXD_REG_BASE     0UL
#define REG32(X)            ((uint32_t) (X))

#include "iomuxd.h"

/*
 * i.MX8 PAD
 *
 * PAD
 *
 * Registers defined in this header file:
 * - HW_PAD_IOMUX - Pad register
 *
 * - hw_pad_t - Struct containing all module registers.
 */

/*******************************************************************************
 * HW_PAD_IOMUX - I/O Mux Control Register
 ******************************************************************************/

/*!
 * @brief HW_PAD_IOMUX - I/O Mux Control Register (RW)
 */
typedef union _hw_pad_iomux
{
    uint32_t U;
    struct _hw_pad_iomux_bitfields0
    {
        uint32_t GP : 19; /*!< [18:0] GP controls. */
        uint32_t WAKEUP : 3; /*!< [21:19] Wakeup controls. */
        uint32_t WAKEUP_ENB : 1; /*!< [22] Wakeup write enable. */
        uint32_t LPCONFIG : 2; /*!< [24:23] Low-power config. */
        uint32_t CONFIG : 2; /*!< [26:25] Config. */
        uint32_t IFMUX : 3; /*!< [29:27] Mux. */
        uint32_t GP_ENB : 1; /*!< [30] GP write enable. */
        uint32_t IFMUX_ENB : 1; /*!< [31] Mux write enable. */
    } B;
    struct _hw_pad_iomux_28fdsoi
    {
        uint32_t DSE : 3; /*!< [2:0] Drive strength. */
        uint32_t _reserved1 : 2; /*!< [4:3] */
        uint32_t PS : 2; /*!< [6:5] Pull select. */
        uint32_t _reserved2 : 12; /*!< [18:7] */
        uint32_t WAKEUP : 3; /*!< [21:19] Wakeup controls. */
        uint32_t WAKEUP_ENB : 1; /*!< [22] Wakeup write enable. */
        uint32_t LPCONFIG : 2; /*!< [24:23] Low-power config. */
        uint32_t CONFIG : 2; /*!< [26:25] Config. */
        uint32_t IFMUX : 3; /*!< [29:27] Mux. */
        uint32_t GP_ENB : 1; /*!< [30] GP write enable. */
        uint32_t IFMUX_ENB : 1; /*!< [31] Mux write enable. */
    } FDS0I28;
    struct _hw_pad_iomux_28fdsoi_hsic
    {
        uint32_t DSE : 3; /*!< [2:0] Drive strength. */
        uint32_t HYS : 1; /*!< [3] Hysteresis. */
        uint32_t PUS : 2; /*!< [5:4] Pull-up select. */
        uint32_t PKE : 1; /*!< [6] Pad keeper enable. */
        uint32_t PUE : 1; /*!< [7] Pull-up enable. */
        uint32_t _reserved2 : 11; /*!< [18:8] */
        uint32_t WAKEUP : 3; /*!< [21:19] Wakeup controls. */
        uint32_t WAKEUP_ENB : 1; /*!< [22] Wakeup write enable. */
        uint32_t LPCONFIG : 2; /*!< [24:23] Low-power config. */
        uint32_t CONFIG : 2; /*!< [26:25] Config. */
        uint32_t IFMUX : 3; /*!< [29:27] Mux. */
        uint32_t GP_ENB : 1; /*!< [30] GP write enable. */
        uint32_t IFMUX_ENB : 1; /*!< [31] Mux write enable. */
    } FDS0I28_HSIC;
    struct _hw_pad_iomux_28fdsoi_comp
    {
        uint32_t COMPEN : 3; /*!< [2:0] Mode. */
        uint32_t FASTFRZ : 1; /*!< [3] Fast freeze. */
        uint32_t PSW_OVR  : 1; /*!< [4] 2.5 volt override */
        uint32_t RASRCP : 4; /*!< [8:5] PMOS comp. */
        uint32_t RASRCN : 4; /*!< [12:9] NMOS comp. */
        uint32_t NASRC_SEL : 1; /*!< [13] Read NASRC select. */
        uint32_t COMPOK  : 1; /*!< [14] Comp status. */
        uint32_t NASRC : 4; /*!< [18:15] NASRC value. */
        uint32_t _reserved2 : 4; /*!< [22:19] */
        uint32_t LPCONFIG : 2; /*!< [24:23] Low-power config. */
        uint32_t _reserved3 : 5; /*!< [29:25] */
        uint32_t GP_ENB : 1; /*!< [30] GP write enable. */
        uint32_t IFMUX_ENB : 1; /*!< [31] Mux write enable. */
    } FDS0I28_COMP;
} hw_pad_iomux_t;

/*!
 * @name Constants and macros for entire PAD_IOMUX register
 */
/*@{*/
#define HW_PAD_IOMUX_ADDR(x, y)   ((uintptr_t)(x) + (y))
#define HW_PAD_IOMUX(x, y)        (*(__IO hw_pad_iomux_t *) HW_PAD_IOMUX_ADDR(x, y))
#define HW_PAD_IOMUX_RD(x, y)     (HW_PAD_IOMUX(x, y).U)
#define HW_PAD_IOMUX_WR(x, y, v)  (HW_PAD_IOMUX(x, y).U = (v))
#define HW_PAD_IOMUX_SET(x, y, v) (HW_PAD_IOMUX_WR(x, y, HW_PAD_IOMUX_RD(x, y) |  (v)))
#define HW_PAD_IOMUX_CLR(x, y, v) (HW_PAD_IOMUX_WR(x, y, HW_PAD_IOMUX_RD(x, y) & ~(v)))
#define HW_PAD_IOMUX_TOG(x, y, v) (HW_PAD_IOMUX_WR(x, y, HW_PAD_IOMUX_RD(x, y) ^  (v)))
/*@}*/

/*******************************************************************************
 * hw_pad_t - module struct
 ******************************************************************************/
/*!
 * @brief All PAD module registers.
 */
#pragma pack(1)

typedef struct _hw_pad
{
    struct {
        struct {
            struct {
                __IO hw_pad_iomux_t IOMUXr;
                __IO hw_pad_iomux_t IOMUX_SETr;
                __IO hw_pad_iomux_t IOMUX_CLRr;
                __IO hw_pad_iomux_t IOMUX_TOGr;
                uint32_t _reserved0[12];
            } PAD[16];
        __I uint32_t GLOBALr;
        uint32_t _reserved1[767];
        } GROUP[32];
    } RING[4];
} hw_pad_t;
#pragma pack()

/*! @brief Macro to access all PAD registers. */
/*! @param x PAD module instance base address. */
/*! @return Reference (not a pointer) to the registers struct. To get a pointer to the struct,
 *     use the '&' operator, like <code>&HW_PAD(PAD_BASE)</code>. */
#define HW_PAD(x)      (*(hw_pad_t *)(x))

#endif /* HW_PAD_REGISTERS_H */

